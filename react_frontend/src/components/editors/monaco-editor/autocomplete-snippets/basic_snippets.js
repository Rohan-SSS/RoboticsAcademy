export const basic_snippets = [
  {
    type: "snippet",
    label: "import numpy as np",
    code: "import numpy as np",
    descriptions: "import numpy as np",
  },
  {
    type: "snippet",
    label: "import numpy",
    code: "import numpy",
    descriptions: "import numpy",
  },
  {
    type: "snippet",
    label: "import math",
    code: "import math",
    descriptions: "import math",
  },
  {
    type: "snippet",
    label: "import cv2",
    code: "import cv2",
    descriptions: "import cv2",
  },
  {
    type: "snippet",
    label: "RA: Template-01",
    code: "import GUI\nimport HAL\n# Enter sequential code!\n\nwhile True:\n    # Enter iterative code!",
    descriptions:
      "import GUI\nimport HAL\n# Enter sequential code!\n\nwhile True:\n    # Enter iterative code!",
  },
  {
    type: "snippet",
    label: "def",
    code: "def ${1:function_name}(${2:args}):\n\t${3:pass}",
    descriptions: "def ${1:function_name}(${2:args}):\n\t${3:pass}",
  },
  {
    type: "snippet",
    label: "if",
    code: "if ${1:condition}:\n\t${2:# code}",
    descriptions: "if ${1:condition}:\n\t${2:# code}",
  },
  {
    type: "snippet",
    label: "elif",
    code: "elif ${1:condition}:\n\t${2:# code}",
    descriptions: "elif ${1:condition}:\n\t${2:# code}",
  },
  {
    type: "snippet",
    label: "else",
    code: "else:\n\t${1:# code}",
    descriptions: "else:\n\t${1:# code}",
  },
  {
    type: "snippet",
    label: "for",
    detail: "For Item",
    code: "for ${1:item} in ${2:iterable}:\n\t${3:# code}",
    descriptions: "for ${1:item} in ${2:iterable}:\n\t${3:# code}",
  },
  {
    type: "snippet",
    label: "while",
    code: "while ${1:condition}:\n\t${2:# code}",
    descriptions: "while ${1:condition}:\n\t${2:# code}",
  },
  {
    type: "snippet",
    label: "try",
    code: "try:\n\t# comment:\nexcept Exception as e:\n\traise e\n# end try",
    descriptions:
      "try:\n\t# comment:\nexcept Exception as e:\n\traise e\n# end try",
  },
  {
    type: "function",
    label: "print",
    code: "print(${1:message})",
    descriptions: "print(${1:message})",
  },
  {
    type: "keyword",
    label: "return",
    code: "return",
    descriptions: "return",
  },
  {
    type: "snippet",
    label: "abs",
    code: "abs(x)",
    descriptions: "abs(x)",
  },
  {
    type: "snippet",
    label: "all",
    code: "all(iterable)",
    descriptions: "all(iterable)",
  },
  {
    type: "snippet",
    label: "any",
    code: "any(iterable)",
    descriptions: "any(iterable)",
  },
  {
    type: "snippet",
    label: "ascii",
    code: "ascii(object)",
    descriptions: "ascii(object)",
  },
  {
    type: "snippet",
    label: "bin",
    code: "bin(x)",
    descriptions: "bin(x)",
  },
  {
    type: "snippet",
    label: "bool",
    code: "bool(object)",
    descriptions: "bool(object)",
  },
  {
    type: "snippet",
    label: "bytearray",
    code: "bytearray([source[, encoding[, errors]]])",
    descriptions: "bytearray([source[, encoding[, errors]]])",
  },
  {
    type: "snippet",
    label: "bytes",
    code: "bytes(x, encoding, error)",
    descriptions: "bytes(x, encoding, error)",
  },
  {
    type: "snippet",
    label: "callable",
    code: "callable(object)",
    descriptions: "callable(object)",
  },
  {
    type: "snippet",
    label: "chr",
    code: "chr(i)",
    descriptions: "chr(i)",
  },
  {
    type: "snippet",
    label: "classmethod",
    code: "classmethod(function)",
    descriptions: "classmethod(function)",
  },
  {
    type: "snippet",
    label: "compile",
    code: "compile(source, filename, mode, flag, dont_inherit, optimize)",
    descriptions:
      "compile(source, filename, mode, flag, dont_inherit, optimize)",
  },
  {
    type: "snippet",
    label: "complex",
    code: "complex(real, imaginary)",
    descriptions: "complex(real, imaginary)",
  },
  {
    type: "snippet",
    label: "delattr",
    code: "delattr(object, attribute)",
    descriptions: "delattr(object, attribute)",
  },
  {
    type: "snippet",
    label: "dict",
    code: "dict(keyword arguments)",
    descriptions: "dict(keyword arguments)",
  },
  {
    type: "snippet",
    label: "dir",
    code: "dir(object)",
    descriptions: "dir(object)",
  },
  {
    type: "snippet",
    label: "divmod",
    code: "divmod(divident, divisor)",
    descriptions: "divmod(divident, divisor)",
  },
  {
    type: "snippet",
    label: "enumerate",
    code: "enumerate(iterable, start)",
    descriptions: "enumerate(iterable, start)",
  },
  {
    type: "snippet",
    label: "eval",
    code: "eval(expression, globals, locals)",
    descriptions: "eval(expression, globals, locals)",
  },
  {
    type: "snippet",
    label: "exec",
    code: "exec(object, globals, locals)",
    descriptions: "exec(object, globals, locals)",
  },
  {
    type: "snippet",
    label: "filter",
    code: "filter(function, iterable)",
    descriptions: "filter(function, iterable)",
  },
  {
    type: "snippet",
    label: "float",
    code: "float(value)",
    descriptions: "float(value)",
  },
  {
    type: "snippet",
    label: "format",
    code: "format(value, format)",
    descriptions: "format(value, format)",
  },
  {
    type: "snippet",
    label: "frozenset",
    code: "frozenset(iterable)",
    descriptions: "frozenset(iterable)",
  },
  {
    type: "snippet",
    label: "getattr",
    code: "getattr(object, attribute, default)",
    descriptions: "getattr(object, attribute, default)",
  },
  {
    type: "snippet",
    label: "globals",
    code: "globals()",
    descriptions: "globals()",
  },
  {
    type: "snippet",
    label: "hasattr",
    code: "hasattr(object, attribute)",
    descriptions: "hasattr(object, attribute)",
  },
  {
    type: "snippet",
    label: "hash",
    code: "hash(object)",
    descriptions: "hash(object)",
  },
  {
    type: "snippet",
    label: "help",
    code: "help(object)",
    descriptions: "help(object)",
  },
  {
    type: "snippet",
    label: "hex",
    code: "hex(number)",
    descriptions: "hex(number)",
  },
  {
    type: "snippet",
    label: "int",
    code: "int(value, base)",
    descriptions: "int(value, base)",
  },
  {
    type: "snippet",
    label: "id",
    code: "id(object)",
    descriptions: "id(object)",
  },
  {
    type: "snippet",
    label: "input",
    code: "input(prompt)",
    descriptions: "input(prompt)",
  },
  {
    type: "snippet",
    label: "isinstance",
    code: "isinstance(object, type)",
    descriptions: "isinstance(object, type)",
  },
  {
    type: "snippet",
    label: "issubclass",
    code: "issubclass(object, subclass)",
    descriptions: "issubclass(object, subclass)",
  },
  {
    type: "snippet",
    label: "iter",
    code: "iter(object, subclass)",
    descriptions: "iter(object, subclass)",
  },
  {
    type: "snippet",
    label: "len",
    code: "len(s)",
    descriptions: "len(s)",
  },
  {
    type: "snippet",
    label: "list",
    code: "list([iterable])",
    descriptions: "list([iterable])",
  },
  {
    type: "snippet",
    label: "locals",
    code: "locals()",
    descriptions: "locals()",
  },
  {
    type: "snippet",
    label: "map",
    code: "map(function, iterables)",
    descriptions: "map(function, iterables)",
  },
  {
    type: "snippet",
    label: "max",
    code: "max(iterable)",
    descriptions: "max(iterable)",
  },
  {
    type: "snippet",
    label: "memoryview",
    code: "memoryview(obj)",
    descriptions: "memoryview(obj)",
  },
  {
    type: "snippet",
    label: "min",
    code: "min(iterable)",
    descriptions: "min(iterable)",
  },
  {
    type: "snippet",
    label: "next",
    code: "next(iterable, default)",
    descriptions: "next(iterable, default)",
  },
  {
    type: "snippet",
    label: "object",
    code: "object()",
    descriptions: "object()",
  },
  {
    type: "snippet",
    label: "oct",
    code: "oct(x)",
    descriptions: "oct(x)",
  },
  {
    type: "snippet",
    label: "open",
    code: "open(file, mode)",
    descriptions: "open(file, mode)",
  },
  {
    type: "snippet",
    label: "ord",
    code: "ord(c)",
    descriptions: "ord(c)",
  },
  {
    type: "snippet",
    label: "pow",
    code: "pow(x, y)",
    descriptions: "pow(x, y)",
  },
  {
    type: "snippet",
    label: "print",
    code: "print(object(s), separator=separator, end=end, file=file, flush=flush)",
    descriptions:
      "print(object(s), separator=separator, end=end, file=file, flush=flush)",
  },
  {
    type: "snippet",
    label: "property",
    code: "property(fget=None, fset=None, fdel=None, doc=None)",
    descriptions: "property(fget=None, fset=None, fdel=None, doc=None)",
  },
  {
    type: "snippet",
    label: "range",
    code: "range(start, stop, step)",
    descriptions: "range(start, stop, step)",
  },
  {
    type: "snippet",
    label: "repr",
    code: "repr(object)",
    descriptions: "repr(object)",
  },
  {
    type: "snippet",
    label: "reversed",
    code: "reversed(seq)",
    descriptions: "reversed(seq)",
  },
  {
    type: "snippet",
    label: "round",
    code: "round(number[, ndigits])",
    descriptions: "round(number[, ndigits])",
  },
  {
    type: "snippet",
    label: "set",
    code: "set(iterable)",
    descriptions: "set(iterable)",
  },
  {
    type: "snippet",
    label: "setattr",
    code: "setattr(object, name, value)",
    descriptions: "setattr(object, name, value)",
  },
  {
    type: "snippet",
    label: "slice",
    code: "slice(start, end, step)",
    descriptions: "slice(start, end, step)",
  },
  {
    type: "snippet",
    label: "sorted",
    code: "sorted(iterable, key=key, reverse=reverse)",
    descriptions: "sorted(iterable, key=key, reverse=reverse)",
  },
  {
    type: "snippet",
    label: "staticmethod",
    code: "staticmethod(function)",
    descriptions: "staticmethod(function)",
  },
  {
    type: "snippet",
    label: "str",
    code: "str(object, encoding=encoding, errors=errors)",
    descriptions: "str(object, encoding=encoding, errors=errors)",
  },
  {
    type: "snippet",
    label: "sum",
    code: "sum(iterable, start)",
    descriptions: "sum(iterable, start)",
  },
  {
    type: "snippet",
    label: "super",
    code: "super(type[, object-or-type])",
    descriptions: "super(type[, object-or-type])",
  },
  {
    type: "snippet",
    label: "tuple",
    code: "tuple(iterable)",
    descriptions: "tuple(iterable)",
  },
  {
    type: "snippet",
    label: "type",
    code: "type(object, bases, dict)",
    descriptions: "type(object, bases, dict)",
  },
  {
    type: "snippet",
    label: "unichr",
    code: "unichr(i)",
    descriptions: "unichr(i)",
  },
  {
    type: "snippet",
    label: "vars",
    code: "vars(object)",
    descriptions: "vars(object)",
  },
  {
    type: "snippet",
    label: "zip",
    code: "zip(iterator1, iterqator2, iterator3 ...)",
    descriptions: "zip(iterator1, iterqator2, iterator3 ...)",
  },
  {
    type: "snippet",
    label: "if",
    code: "if condition:\n  pass",
    descriptions: "if condition:\n  pass",
  },
  {
    type: "snippet",
    label: "ifelif",
    code: "if condition:\n  pass\nelif condition:\n  pass",
    descriptions: "if condition:\n  pass\nelif condition:\n  pass",
  },
  {
    type: "snippet",
    label: "ifelifelse",
    code: "if condition:\n  pass\nelif condition:\n  pass\nelse:\n  pass",
    descriptions:
      "if condition:\n  pass\nelif condition:\n  pass\nelse:\n  pass",
  },
  {
    type: "snippet",
    label: "ifel",
    code: "if condition:\n  pass\nelse:\n  pass",
    descriptions: "if condition:\n  pass\nelse:\n  pass",
  },
  {
    type: "snippet",
    label: "elif",
    code: "else:\n  pass",
    descriptions: "else:\n  pass",
  },
  {
    type: "snippet",
    label: "ifshort",
    code: "print('A') if a > b else print('A')",
    descriptions: "print('A') if a > b else print('A')",
  },
  {
    type: "snippet",
    label: "lambda",
    code: "lambda arguments : expression",
    descriptions: "lambda arguments : expression",
  },
  {
    type: "snippet",
    label: "for",
    code: "for item in range:\n ",
    descriptions: "for item in range:\n ",
  },
  {
    type: "snippet",
    label: "for=>range_function_1",
    code: "for x in range(6):\n print(x)",
    descriptions: "for x in range(6):\n print(x)",
  },
  {
    type: "snippet",
    label: "for=>for_else",
    code: "for x in range(2, 6):\n print(x)\nelse:\n print('Finally finished!')",
    descriptions:
      "for x in range(2, 6):\n print(x)\nelse:\n print('Finally finished!')",
  },
  {
    type: "snippet",
    label: "while",
    code: "while expression:\n  pass",
    descriptions: "while expression:\n  pass",
  },
  {
    type: "snippet",
    label: "while_else",
    code: "while expression:\n  pass\nelse:\n  pass",
    descriptions: "while expression:\n  pass\nelse:\n  pass",
  },
  {
    type: "snippet",
    label: "while=>",
    code: "i = 1\nwhile i < 6:\n  print(i)\n  i += 1",
    descriptions: "i = 1\nwhile i < 6:\n  print(i)\n  i += 1",
  },
  {
    type: "snippet",
    label: "while=>break_statement",
    code: "i = 1\nwhile i < 6:\n print(i)\n  if i == 3:\n    break\n  i += 1",
    descriptions:
      "i = 1\nwhile i < 6:\n print(i)\n  if i == 3:\n    break\n  i += 1",
  },
  {
    type: "snippet",
    label: "while=>continue_statement",
    code: "i = 1\nwhile i < 6:\n  i += 1\n  print(i)\n  if i == 3:\n    continue\n  print(i)",
    descriptions:
      "i = 1\nwhile i < 6:\n  i += 1\n  print(i)\n  if i == 3:\n    continue\n  print(i)",
  },
  {
    type: "snippet",
    label: "function",
    code: "def name(args):\n pass",
    descriptions: "def name(args):\n pass",
  },
  {
    type: "snippet",
    label: "def",
    code: "def name(args):\n pass",
    descriptions: "def name(args):\n pass",
  },
  {
    type: "snippet",
    label: "capitalize",
    code: ".capitalize()",
    descriptions: ".capitalize()",
  },
  {
    type: "snippet",
    label: "casefold",
    code: ".casefold()",
    descriptions: ".casefold()",
  },
  {
    type: "snippet",
    label: "center",
    code: ".center()",
    descriptions: ".center()",
  },
  {
    type: "snippet",
    label: "string.count",
    code: ".count()",
    descriptions: ".count()",
  },
  {
    type: "snippet",
    label: "encode",
    code: ".encode()",
    descriptions: ".encode()",
  },
  {
    type: "snippet",
    label: "endswith",
    code: ".endswith()",
    descriptions: ".endswith()",
  },
  {
    type: "snippet",
    label: "expandtabs",
    code: ".expandtabs()",
    descriptions: ".expandtabs()",
  },
  {
    type: "snippet",
    label: "find",
    code: ".find()",
    descriptions: ".find()",
  },
  {
    type: "snippet",
    label: "format",
    code: ".format()",
    descriptions: ".format()",
  },
  {
    type: "snippet",
    label: "format_map",
    code: ".format_map()",
    descriptions: ".format_map()",
  },
  {
    type: "snippet",
    label: "index",
    code: ".index()",
    descriptions: ".index()",
  },
  {
    type: "snippet",
    label: "isalnum",
    code: ".isalnum()",
    descriptions: ".isalnum()",
  },
  {
    type: "snippet",
    label: "isalpha",
    code: ".isalpha()",
    descriptions: ".isalpha()",
  },
  {
    type: "snippet",
    label: "isdecimal",
    code: ".isdecimal()",
    descriptions: ".isdecimal()",
  },
  {
    type: "snippet",
    label: "isdigit",
    code: ".isdigit()",
    descriptions: ".isdigit()",
  },
  {
    type: "snippet",
    label: "isidentifier",
    code: ".isidentifier()",
    descriptions: ".isidentifier()",
  },
  {
    type: "snippet",
    label: "islower",
    code: ".islower()",
    descriptions: ".islower()",
  },
  {
    type: "snippet",
    label: "isnumeric",
    code: ".isnumeric()",
    descriptions: ".isnumeric()",
  },
  {
    type: "snippet",
    label: "isprintable",
    code: ".isprintable()",
    descriptions: ".isprintable()",
  },
  {
    type: "snippet",
    label: "isspace",
    code: ".isspace()",
    descriptions: ".isspace()",
  },
  {
    type: "snippet",
    label: "istitle",
    code: ".istitle()",
    descriptions: ".istitle()",
  },
  {
    type: "snippet",
    label: "isupper",
    code: ".isupper()",
    descriptions: ".isupper()",
  },
  {
    type: "snippet",
    label: "join",
    code: ".join()",
    descriptions: ".join()",
  },
  {
    type: "snippet",
    label: "ljust",
    code: ".ljust()",
    descriptions: ".ljust()",
  },
  {
    type: "snippet",
    label: "lower",
    code: ".lower()",
    descriptions: ".lower()",
  },
  {
    type: "snippet",
    label: "lstrip",
    code: ".lstrip()",
    descriptions: ".lstrip()",
  },
  {
    type: "snippet",
    label: "maketrans",
    code: ".maketrans()",
    descriptions: ".maketrans()",
  },
  {
    type: "snippet",
    label: "partition",
    code: ".partition()",
    descriptions: ".partition()",
  },
  {
    type: "snippet",
    label: "replace",
    code: ".replace(x, y)",
    descriptions: ".replace(x, y)",
  },
  {
    type: "snippet",
    label: "rfind",
    code: ".rfind()",
    descriptions: ".rfind()",
  },
  {
    type: "snippet",
    label: "rindex",
    code: ".rindex()",
    descriptions: ".rindex()",
  },
  {
    type: "snippet",
    label: "rpartition",
    code: ".rpartition()",
    descriptions: ".rpartition()",
  },
  {
    type: "snippet",
    label: "rsplit",
    code: ".rsplit()",
    descriptions: ".rsplit()",
  },
  {
    type: "snippet",
    label: "split",
    code: ".split()",
    descriptions: ".split()",
  },
  {
    type: "snippet",
    label: "splitlines",
    code: ".splitlines()",
    descriptions: ".splitlines()",
  },
  {
    type: "snippet",
    label: "string.splitlines=>",
    code: "txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines()\nprint(x)",
    descriptions:
      "txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines()\nprint(x)",
  },
  {
    type: "snippet",
    label: "string.splitlines=>",
    code: "txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines(True)\nprint(x)",
    descriptions:
      "txt = 'Thank you for the music\nWelcome to the jungle'\nx = txt.splitlines(True)\nprint(x)",
  },
  {
    type: "snippet",
    label: "startswith",
    code: ".startswith()",
    descriptions: ".startswith()",
  },
  {
    type: "snippet",
    label: "swapcase",
    code: ".swapcase()",
    descriptions: ".swapcase()",
  },
  {
    type: "snippet",
    label: "title",
    code: ".title()",
    descriptions: ".title()",
  },
  {
    type: "snippet",
    label: "translate",
    code: ".translate()",
    descriptions: ".translate()",
  },
  {
    type: "snippet",
    label: "upper",
    code: ".upper()",
    descriptions: ".upper()",
  },
  {
    type: "snippet",
    label: "string.upper=>",
    code: "txt = 'Hello my friends'\nx = txt.upper()\nprint(x)",
    descriptions: "txt = 'Hello my friends'\nx = txt.upper()\nprint(x)",
  },
  {
    type: "snippet",
    label: "zfill",
    code: ".zfill()",
    descriptions: ".zfill()",
  },
  {
    type: "snippet",
    label: "append",
    code: ".append()",
    descriptions: ".append()",
  },
  {
    type: "snippet",
    label: "clear",
    code: ".clear()",
    descriptions: ".clear()",
  },
  {
    type: "snippet",
    label: "copy",
    code: ".copy()",
    descriptions: ".copy()",
  },
  {
    type: "snippet",
    label: "list.count",
    code: ".count",
    descriptions: ".count",
  },
  {
    type: "snippet",
    label: "extend",
    code: ".extend()",
    descriptions: ".extend()",
  },
  {
    type: "snippet",
    label: "index",
    code: ".index()",
    descriptions: ".index()",
  },
  {
    type: "snippet",
    label: "insert",
    code: ".insert()",
    descriptions: ".insert()",
  },
  {
    type: "snippet",
    label: "pop",
    code: ".pop()",
    descriptions: ".pop()",
  },
  {
    type: "snippet",
    label: "remove",
    code: ".remove()",
    descriptions: ".remove()",
  },
  {
    type: "snippet",
    label: "reverse",
    code: ".reverse()",
    descriptions: ".reverse()",
  },
  {
    type: "snippet",
    label: "sort",
    code: ".sort()",
    descriptions: ".sort()",
  },
  {
    type: "snippet",
    label: "comprehensions",
    code: "[ expression for item in list if conditional ]",
    descriptions: "[ expression for item in list if conditional ]",
  },
  {
    type: "snippet",
    label: "clear",
    code: ".clear()",
    descriptions: ".clear()",
  },
  {
    type: "snippet",
    label: "copy",
    code: ".copy()",
    descriptions: ".copy()",
  },
  {
    type: "snippet",
    label: "fromkeys",
    code: ".fromkeys(x, y)",
    descriptions: ".fromkeys(x, y)",
  },
  {
    type: "snippet",
    label: "get",
    code: ".get()",
    descriptions: ".get()",
  },
  {
    type: "snippet",
    label: "items",
    code: ".items()",
    descriptions: ".items()",
  },
  {
    type: "snippet",
    label: "keys",
    code: ".keys()",
    descriptions: ".keys()",
  },
  {
    type: "snippet",
    label: "pop",
    code: ".pop()",
    descriptions: ".pop()",
  },
  {
    type: "snippet",
    label: "popitem",
    code: ".popitem()",
    descriptions: ".popitem()",
  },
  {
    type: "snippet",
    label: "setdefault",
    code: ".setdefault()",
    descriptions: ".setdefault()",
  },
  {
    type: "snippet",
    label: "update",
    code: ".update()",
    descriptions: ".update()",
  },
  {
    type: "snippet",
    label: "values",
    code: ".values()",
    descriptions: ".values()",
  },
  {
    type: "snippet",
    label: "tuple.count",
    code: ".count(value)",
    descriptions: ".count(value)",
  },
  {
    type: "snippet",
    label: "index",
    code: ".index(value)",
    descriptions: ".index(value)",
  },
  {
    type: "snippet",
    label: "add",
    code: ".add()",
    descriptions: ".add()",
  },
  {
    type: "snippet",
    label: "clear",
    code: ".clear()",
    descriptions: ".clear()",
  },
  {
    type: "snippet",
    label: "copy",
    code: ".copy()",
    descriptions: ".copy()",
  },
  {
    type: "snippet",
    label: "difference",
    code: "x.difference(y)",
    descriptions: "x.difference(y)",
  },
  {
    type: "snippet",
    label: "difference_update",
    code: "x.difference_update(y)",
    descriptions: "x.difference_update(y)",
  },
  {
    type: "snippet",
    label: "discard",
    code: ".discard()",
    descriptions: ".discard()",
  },
  {
    type: "snippet",
    label: "intersection",
    code: "x.intersection(y)",
    descriptions: "x.intersection(y)",
  },
  {
    type: "snippet",
    label: "intersection_update",
    code: "x.intersection_update(y)",
    descriptions: "x.intersection_update(y)",
  },
  {
    type: "snippet",
    label: "isdisjoint",
    code: "x.isdisjoint(y)",
    descriptions: "x.isdisjoint(y)",
  },
  {
    type: "snippet",
    label: "issubset",
    code: "x.issubset(y)",
    descriptions: "x.issubset(y)",
  },
  {
    type: "snippet",
    label: "issuperset",
    code: "x.issuperset(y)",
    descriptions: "x.issuperset(y)",
  },
  {
    type: "snippet",
    label: "pop",
    code: ".pop()",
    descriptions: ".pop()",
  },
  {
    type: "snippet",
    label: "remove",
    code: ".remove()",
    descriptions: ".remove()",
  },
  {
    type: "snippet",
    label: "symmetric_difference",
    code: "x.symmetric_difference(y)",
    descriptions: "x.symmetric_difference(y)",
  },
  {
    type: "snippet",
    label: "symmetric_difference_update",
    code: "x.symmetric_difference_update(y)",
    descriptions: "x.symmetric_difference_update(y)",
  },
  {
    type: "snippet",
    label: "union",
    code: "x.union(y)",
    descriptions: "x.union(y)",
  },
  {
    type: "snippet",
    label: "update",
    code: "x.update(y)",
    descriptions: "x.update(y)",
  },
  {
    type: "snippet",
    label: "class",
    code: "class MyClass:\n  pass",
    descriptions: "class MyClass:\n  pass",
  },
  {
    type: "snippet",
    label: "self",
    code: "self",
    descriptions: "self",
  },
  {
    type: "snippet",
    label: "__init__",
    code: "def __init__(self, name, age):\n  self.name = name\n  self.age = age",
    descriptions:
      "def __init__(self, name, age):\n  self.name = name\n  self.age = age",
  },
  {
    type: "snippet",
    label: "__iter__",
    code: "def __iter__(self):\n  self.a = 1\n  return self",
    descriptions: "def __iter__(self):\n  self.a = 1\n  return self",
  },
  {
    type: "snippet",
    label: "__next__",
    code: "def __next__(self):\n  x = self.a\n  self.a += 1\n  return x",
    descriptions:
      "def __next__(self):\n  x = self.a\n  self.a += 1\n  return x",
  },
  {
    type: "snippet",
    label: "import mymodule as mx",
    code: "import mymodule as mx",
    descriptions: "import mymodule as mx",
  },
  {
    type: "snippet",
    label: "tryexcept",
    code: "try:\n  print(x)\nexcept:\n  print('An exception occurred')",
    descriptions: "try:\n  print(x)\nexcept:\n  print('An exception occurred')",
  },
  {
    type: "snippet",
    label: "tryexceptfinally",
    code: "try:\n  print(x)\nexcept:\n  print('Something went wrong')\nfinally:\n  print('The try except is finished')",
    descriptions:
      "try:\n  print(x)\nexcept:\n  print('Something went wrong')\nfinally:\n  print('The try except is finished')",
  },
  {
    type: "snippet",
    label: "openFile",
    code: "f = open('demofile.txt', 'r')\nprint(f.read())",
    descriptions: "f = open('demofile.txt', 'r')\nprint(f.read())",
  },
  {
    type: "snippet",
    label: "openFileReadLine",
    code: "f = open('demofile.txt', 'r')\nprint(f.readline())",
    descriptions: "f = open('demofile.txt', 'r')\nprint(f.readline())",
  },
  {
    type: "snippet",
    label: "writeExistFile",
    code: "f = open('demofile.txt', 'a')\nf.write('Now the file has one more line!')",
    descriptions:
      "f = open('demofile.txt', 'a')\nf.write('Now the file has one more line!')",
  },
  {
    type: "snippet",
    label: "writeOwerWrite",
    code: "f = open('demofile.txt', 'w')\nf.write('Woops! I have deleted the content!')",
    descriptions:
      "f = open('demofile.txt', 'w')\nf.write('Woops! I have deleted the content!')",
  },
  {
    type: "snippet",
    label: "createFileIfDoesNotExist",
    code: "f = open('myfile.txt', 'w')",
    descriptions: "f = open('myfile.txt', 'w')",
  },
  {
    type: "snippet",
    label: "createFile",
    code: "f = open('myfile.txt', 'x')",
    descriptions: "f = open('myfile.txt', 'x')",
  },
  {
    type: "snippet",
    label: "deleteFile",
    code: "#import os\nos.remove('demofile.txt')",
    descriptions: "#import os\nos.remove('demofile.txt')",
  },
  {
    type: "snippet",
    label: "name",
    code: "__name__",
    descriptions: "__name__",
  },
];
